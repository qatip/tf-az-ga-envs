name: tf-plan
on:
  workflow_dispatch:
    inputs:
      env:
        description: "Environment to plan (dev|test|prod)"
        required: true
        default: "dev"

permissions:
  id-token: write
  contents: read

jobs:
  plan:
    runs-on: ubuntu-latest

    # pick the target environment from the input
    env:
      ENV: ${{ inputs.env }}
      TF_IN_AUTOMATION: true

      # Azure OIDC (these come from the chosen GitHub Environment)
      ARM_USE_OIDC: true
      ARM_CLIENT_ID:       ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID:       ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # pass subscription into Terraform as a variable
      TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # backend config (non-sensitive), from Environment Variables
      STATE_RG:        ${{ vars.STATE_RG }}
      STATE_STORAGE:   ${{ vars.STATE_STORAGE }}
      STATE_CONTAINER: ${{ vars.STATE_CONTAINER }}

    # bind to the selected GitHub Environment to get the right secrets/vars
    environment: ${{ env.ENV }}

    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id:       ${{ env.ARM_CLIENT_ID }}
          tenant-id:       ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Terraform init (per-env state key)
        run: |
          terraform init \
            -backend-config="resource_group_name=${STATE_RG}" \
            -backend-config="storage_account_name=${STATE_STORAGE}" \
            -backend-config="container_name=${STATE_CONTAINER}" \
            -backend-config="key=${ENV}.tfstate"

      - name: Terraform fmt
        run: terraform fmt -check

      - name: Terraform validate
        run: terraform validate

      - name: Terraform plan
        run: terraform plan -var-file="${ENV}.tfvars"
