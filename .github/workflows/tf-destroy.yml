name: tf-destroy

on:
  workflow_dispatch:
    inputs:
      scope:
        type: choice
        description: "Environment to destroy"
        options: [dev, test, prod, all]
        default: dev
      confirm:
        description: "Type DESTROY-<env> or DESTROY-ALL to confirm"
        required: true
        default: "NO"

permissions:
  id-token: write
  contents: read

jobs:
  destroy:
    # Guard: exact confirmation required
    if: ${{ (inputs.scope != 'all' && inputs.confirm == format('DESTROY-{0}', inputs.scope))
          || (inputs.scope == 'all' && inputs.confirm == 'DESTROY-ALL') }}

    runs-on: ubuntu-latest

    # Expand to one job per env when scope == all; otherwise just the chosen env
    strategy:
      matrix:
        env: ${{ inputs.scope == 'all'
          && fromJSON('["dev","test","prod"]')
          || fromJSON(format('["{0}"]', inputs.scope)) }}
      max-parallel: 1  # run sequentially; change to 3 if you want parallel

    # Bind each job to its GitHub Environment (secrets/approvals/vars)
    environment: ${{ matrix.env }}

    concurrency:
      group: terraform-${{ matrix.env }}
      cancel-in-progress: true

    env:
      ENV: ${{ matrix.env }}
      TF_IN_AUTOMATION: true
      ARM_USE_OIDC: true

    steps:
      - uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id:       ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id:       ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - uses: hashicorp/setup-terraform@v3

      - name: Terraform init (per-env state key)
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ vars.STATE_RG }}" \
            -backend-config="storage_account_name=${{ vars.STATE_STORAGE }}" \
            -backend-config="container_name=${{ vars.STATE_CONTAINER }}" \
            -backend-config="key=${ENV}.tfstate"

      - name: Terraform destroy
        env:
          TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: terraform destroy -auto-approve -var-file="${ENV}.tfvars"

      # Optional: delete the state blob after destroy (usually keep it)
      # - name: Delete state blob (optional)
      #   run: |
      #     az storage blob delete \
      #       --container-name "${{ vars.STATE_CONTAINER }}" \
      #       --name "${ENV}.tfstate" \
      #       --account-name "${{ vars.STATE_STORAGE }}" \
      #       --auth-mode login || true
